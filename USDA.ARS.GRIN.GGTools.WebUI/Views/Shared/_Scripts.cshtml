<script src="~/plugins/jquery/jquery.min.js"></script>
<script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/dist/js/adminlte.js"></script>
<script type="text/javascript" src="~/Content/dist/js/DataTables/jquery.dataTables.min.js"></script>
<script type="text/javascript" language="javascript" src="~/Content/dist/js/DataTables/dataTables.select.min.js"></script>
<script type="text/javascript" language="javascript" src="~/Content/dist/js/DataTables/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="~/Content/dist/js/DataTables/buttons.html5.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/responsive/2.4.0/js/dataTables.responsive.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/responsive/2.4.0/js/dataTables.responsive.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/jquery.mark.min.js" integrity="sha512-mhbv5DqBMgrWL+32MmsDOt/OAvqr/cHimk6B8y/bx/xS88MVkYGPiVv2ixKVrkywF2qHplNRUvFsAHUdxZ3Krg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script type="text/javascript">
    $(document).ready(function () {
        $('#txtNote').summernote({
            /*$('#txtNote').summernote({*/
            height: 100,                 // set editor height
            minHeight: null,             // set minimum height of editor
            maxHeight: null,             // set maximum height of editor
            'width': '100%',
            focus: true                  // set focus to editable area after initializing summernote
        });

        /* When any lookup modal is loaded, ensure that the first visible text input field
         * within the lookup/search form has cursor focus. */
        $(document).on('shown.bs.modal', function (e) {
            $.fn.dataTable.tables({ visible: true, api: true }).columns.adjust();
            $(".overlay").hide();
            $(".ggtools-lookup-form :input[type='text']:visible:enabled:first").focus();
            $("#frmLookup :input[type='text']:visible:enabled:first").focus();
            $(".modal-body :input[type='text']:visible:enabled:first").focus();
        });

        /* Set first edit field active in any edit form. */
        $("#section-search-criteria :input[type='text']:visible:enabled:first").focus();
        $("#frmMain :input[type='text']:visible:enabled:first").focus();
        $("#frmEdit :input[type='text']:visible:enabled:first").focus();
        $("#frmLookup :input[type='text']:visible:enabled:first").focus();

        /* When user begins typing, hide error message block. */
        $(document).on('keypress', function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            $("#section-input-error").hide();
        });

        /**
         * Determines if a form is dirty by comparing the current value of each element
         * with its default value.
         *
         * param {Form} form the form to be checked.
         * return {Boolean} <code>true</code> if the form is dirty, <code>false</code>
         *                   otherwise.
         */
        function formIsDirty(form) {
          for (var i = 0; i < form.elements.length; i++) {
            var element = form.elements[i];
            var type = element.type;
            if (type == "checkbox" || type == "radio") {
              if (element.checked != element.defaultChecked) {
                return true;
              }
            }
            else if (type == "hidden" || type == "password" ||
                     type == "text" || type == "textarea") {
              if (element.value != element.defaultValue) {
                return true;
              }
            }
            else if (type == "select-one" || type == "select-multiple") {
              for (var j = 0; j < element.options.length; j++) {
                if (element.options[j].selected !=
                    element.options[j].defaultSelected) {
                  return true;
                }
              }
            }
          }
          return false;
        }

        window.onbeforeunload = function (e) {
            e = e || window.event;
            if (formIsDirty(document.forms["frmEdit"])) {
                // For IE and Firefox
                if (e) {
                    e.returnValue = "DEBUG You have unsaved changes.";
                }
                // For Safari
                return "You have unsaved changes.";
            }
        };
    });
</script>
