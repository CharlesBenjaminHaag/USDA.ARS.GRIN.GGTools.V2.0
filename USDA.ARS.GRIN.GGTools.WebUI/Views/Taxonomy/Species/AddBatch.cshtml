@model USDA.ARS.GRIN.GGTools.Taxonomy.ViewModelLayer.SpeciesViewModel
@{
    ViewBag.Title = Model.PageTitle;
    ViewBag.ID = Model.ID;
    Layout = "~/Views/Shared/_LayoutAdminLTE3.cshtml";
}

<style>
    #templateTable {
        display: none; /* Keep the template table hidden */
    }
</style>

<div id="" class="card card-success">
    <div class="card-header">
        <h3 class="card-title">Species</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <div>
            <div>
                <div>
                    <button id="addRow" class="btn btn-primary">Add Row</button>
                    <button id="saveChanges" class="btn btn-primary">Save Changes</button>
                    <p id="display-id"></p>
                </div>
                <table id="mainTable" class="table table-striped" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Genus</th>
                            <th>Epithet</th>
                            <th>Authority</th>
                            <th>Protologue</th>
                            <th>URL</th>
                            <th>Note</th>
                            <th>Last Modified</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>

                <div id="statusMessage"></div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden template table -->
<table id="templateTable" style="display:none;">
    <tr>
        <td>
            <input type="text" class="form-control" id="txtID" name="ID" />
            <input type="hidden" class="unique-id" value="template-id" />
        </td>
        <td>
            <div class="input-group">
                @*<span id="placeholder-genus-name" style="background-color: #ecf0f5; border: 1px solid #ced4da; width: 100%; position: relative; -ms-flex: 1 1 auto; flex: 1 1 auto; min-width: 0; margin-bottom: 0; padding: 0.375rem 0.75rem; height: calc(2.25rem + 2px); position: relative; -ms-flex: 1 1 auto; flex: 1 1 auto; width: 1%; min-width: 0; margin-bottom: 0;">@Html.Raw(Model.Entity.GenusName)</span>@Html.HiddenFor(x => x.Entity.GenusID)*@
            <input type="text" class="form-control" id="txtGenusName" name="GenusName" />
                <span class="input-group-append">
                    <button id="btnOpenGenusLookupModal"
                            type="button"
                            data-toggle="modal"
                            data-ggtools-id-field="GenusID"
                            data-ggtools-name-field="GenusName"
                            data-target="#modal-genus-lookup"
                            class="btn btn-default btn-flat">
                        <i class="fa fa-search"></i>
                    </button>
                </span>
            </div>
            <input type="hidden" id="hfGenusID" name="GenusID" />
        </td>
        <td><input type="text" class="form-control" id="txtSpeciesName" name="SpeciesName" /></td>
        <td><input type="text" class="form-control" id="txtSpeciesAuthority" name="SpeciesAuthority" /></td>
        <td><input type="text" class="form-control" id="txtProtologue" name="Protologue" /></td>
        <td><input type="text" class="form-control" id="txtProtologueVirtualPath" name="ProtologueVirtualPath" /></td>
        <td><input type="text" class="form-control" id="txtNote" name="Note" /></td>
        <td><input type="text" class="form-control" id="txtModifiedDate" name="ModifiedDate" /></td>
        <td>
            <button id="btnDelete" class="btn btn-danger delete-row">Delete</button>
        </td>
        <td>
            <button class="btn btn-default btn-sm copy-btn">Copy</button>
        </td>
    </tr>
</table>


@{Html.RenderAction("RenderLookupModal", "Genus"); }
<script>

    class SpeciesDTO {
        constructor(ID, GenusID, GenusName, SpeciesName, Protologue, ProtologueVirtualPath, SpeciesAuthority, Note) {
            this.ID = ID;
            this.GenusID = GenusID;
            this.GenusName = GenusName;
            this.SpeciesName = SpeciesName;
            this.Protologue = Protologue;
            this.ProtologueVirtualPath = ProtologueVirtualPath;
            this.SpeciesAuthority = SpeciesAuthority;
            this.Note = Note;
        }
    }

    let counter = 1; // Counter to create unique IDs

    // Add row from template to main table
    document.getElementById('addRow').addEventListener('click', function () {
        // Clone the template row
        let templateRow = document.querySelector('#templateTable tr').cloneNode(true);

        // Set id's of all 1) textboxes, 2) hidden fields, 3) buttons.
        let textboxes = templateRow.querySelectorAll('input[type="text"]');
        textboxes.forEach((textbox, index) => {
            textbox.id = textbox.id + "-" + counter;


        });

        let hiddenFields = templateRow.querySelectorAll('input[type="hidden"]');
        hiddenFields.forEach((hiddenField, index) => {
            hiddenField.id = hiddenField.id + "-" + counter;
           
        });


        let buttons = templateRow.querySelectorAll('button');
        buttons.forEach((button, index) => {
            button.id = button.id + "-" + counter;

            // Check if the button has the two specified data attributes
            if (button.hasAttribute(`data-ggtools-id-field`) && button.hasAttribute(`data-ggtools-name-field`)) {
                // Retrieve the values of the two data attributes
                let dataAttr1Value = button.getAttribute(`data-ggtools-id-field`);
                let dataAttr2Value = button.getAttribute(`data-ggtools-name-field`);

                button.setAttribute(`data-ggtools-id-field`, 'hf' + dataAttr1Value + '-' + counter);
                button.setAttribute(`data-ggtools-name-field`, 'txt' + dataAttr2Value + '-' + counter);

                // Log the button id and the data attribute values
                console.log(button.id);
                console.log(dataAttr1Value);
                console.log(dataAttr2Value);
            }
        });

        // Set unique hidden field ID
        let hiddenField = templateRow.querySelector('input[type="hidden"]');
        hiddenField.value = 'unique-id-' + counter;

        // Make the row visible and append it to the main table
        document.querySelector('#mainTable tbody').appendChild(templateRow);

        // Update the counter for the next row
        counter++;
    });

    // Handle row deletion and display unique ID before deletion
    document.querySelector('#mainTable').addEventListener('click', function (event) {
        if (event.target.classList.contains('delete-row')) {
            let row = event.target.closest('tr');
            let uniqueId = row.querySelector('input[type="hidden"]').value;
            alert('Deleting row with ID: ' + uniqueId);

            // Remove the row from the table
            row.remove();
        }

        if (event.target.classList.contains('copy-btn')) {
            let row = event.target.closest('tr');
            let clonedRow = row.cloneNode(true);
            let table = row.closest('table');
            table.querySelector('tbody').appendChild(clonedRow);
        }

        
    });

    // Open modal and pass the value from another field in the row
    //document.querySelector('#mainTable').addEventListener('click', function (event) {
    //    if (event.target.classList.contains('open-modal')) {
    //        let row = event.target.closest('tr');
    //        let valueToPass = row.querySelector('input[type="text"]').value;

    //        // Set modal content
    //        document.getElementById('modalContent').textContent = 'Value from row: ' + valueToPass;

    //        // Open the modal
    //        $('#infoModal').modal('show');
    //    }
    //});

    // Save changes using AJAX
    $('#saveChanges').click(function () {

        var table = getDomElement("#mainTable");

        if (table) {
            const tableBody = document.querySelector('#mainTable tbody');
            const rows = tableBody.querySelectorAll('tr');

            rows.forEach((row) => {
                var id = $(row).find('input[name="ID"]').val();
                var genusId = $(row).find('input[name="GenusID"]').val();
                var genusName = $(row).find('input[name="GenusName"]').val();
                var speciesName = $(row).find('input[name="SpeciesName"]').val();
                var speciesAuthority = $(row).find('input[name="SpeciesAuthority"]').val();
                var protologue = $(row).find('input[name="Protologue"]').val();
                var protologueVirtualPath = $(row).find('input[name="ProtologueVirtualPath"]').val();
                var note = $(row).find('input[name="Note"]').val();

                var species = new SpeciesDTO(id, genusId, genusName, speciesName, speciesAuthority, protologue, protologueVirtualPath, note);
                SaveSpecies(species);
            });
        }
    });

    function SaveSpecies(speciesDTO) {
        console.log("DEBUG: SAVING " + speciesDTO.ID, speciesDTO.GenusID, speciesDTO.GenusName, speciesDTO.SpeciesName, speciesDTO.SpeciesAuthority, speciesDTO.Protologue, speciesDTO.ProtologueVirtualPath, speciesDTO.Note);
        $.ajax({
            url: '@Url.Action("Save","Species")',
            type: 'POST',
            contentType: "application/json; charset=utf-8",

            data: JSON.stringify( { speciesDTO: speciesDTO }),
            success: function (response) {
                if (response.success) {
                    // Handle success
                    alert("Success: " + response.message);
                } else {
                    // Handle the list of error messages
                    var errorList = response.messages;
                    var errorMessage = "The following errors occurred:\n";
                    for (var i = 0; i < errorList.length; i++) {
                        errorMessage += "- " + errorList[i] + "\n";
                    }
                    alert(errorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert("An error occurred: " + error);
            }
        });
    }

    function getDomElement(selector) {
        try {
            const element = document.querySelector(selector);

            if (!element) {
                throw new Error(`Element with selector "${selector}" not found.`);
            }

            return element; // Return the DOM element reference if it exists
        } catch (error) {
            console.error(error.message);
            return null; // Return null if there's an error
        }
    }

    /* ROW COPY LOGIC */ 
    // Function to handle the COPY button click
    function copyRow(buttonElement) {
        // Find the <tr> that contains the clicked button
        let rowToCopy = buttonElement.closest('tr');

        console.log("DEBUG " + rowToCopy);

        // Clone the row
        let clonedRow = rowToCopy.cloneNode(true);

        // Optionally, remove the ID attributes of cloned row elements if needed
        clonedRow.querySelectorAll('[id]').forEach(element => element.removeAttribute('id'));

        


        // Find the table where the row belongs
        let table = rowToCopy.closest('table');

        // Append the cloned row to the end of the table
        table.querySelector('tbody').appendChild(clonedRow);
    }

    // Attach event listeners to all COPY buttons inside the table
    document.querySelectorAll('templateTable button.copy-btn').forEach(button => {
        button.addEventListener('click', function () {
            copyRow(this);
        });
    });

</script>
@*<script type="text/javascript">
        let counter = 1;

        // Function to add a row from the hidden template table to the main table
        function addRow() {
            // Get the template row
            const templateRow = document.querySelector('#template-table tr');

            // Clone the row
            const newRow = templateRow.cloneNode(true);

            // Make the new row visible
            newRow.style.display = '';

            // Set a unique ID in the hidden input field
            const hiddenInput = newRow.querySelector('.row-id');
            hiddenInput.value = 'Row-' + counter;

            // Increment the counter for the next row
            counter++;



            // Add the new row to the main table
            const mainTableBody = document.querySelector('#main-table tbody');
            mainTableBody.appendChild(newRow);

            // Add event listener to the delete button of this row
            const deleteBtn = newRow.querySelector('.delete-btn');
            deleteBtn.addEventListener('click', function () {
                deleteRow(newRow);
            });
        }

        // Function to delete a row and display the unique ID
        function deleteRow(row) {
            // Get the unique ID from the hidden input field
            const uniqueId = row.querySelector('.row-id').value;

            // Display the unique ID
            document.getElementById('display-id').innerText = 'Deleting Row with ID: ' + uniqueId;

            // Remove the row from the table
            row.remove();
        }
    </script>*@

@*<script>
        $(document).ready(function () {
            let counter = 1;

            // Add new row
            // Function to add the template row to the main table
            document.getElementById('addRow').addEventListener('click', function () {
                // Select the hidden template row
                const templateRow = document.querySelector('#templateTable .template-row');

                // Clone the template row
                const newRow = templateRow.cloneNode(true);

                // Make sure the new row is visible by removing any hidden properties or classes
                newRow.style.display = ''; // Ensure it doesn't inherit 'display: none'

                // Append the cloned row to the main table
                const mainTable = document.getElementById('table_taxonomy_species');
                mainTable.appendChild(newRow);
            });

            // Delete row
            $(document).on('click', '.delete-row', function () {
                $(this).closest('tr').remove();
            });

            class SpeciesDTO {
                constructor(ID, GenusID, GenusName, SpeciesName, Protologue, ProtologueVirtualPath, SpeciesAuthority, Note) {
                    this.ID = ID;
                    this.GenusID = GenusID;
                    this.GenusName = GenusName;
                    this.SpeciesName = SpeciesName;
                    this.Protologue = Protologue;
                    this.ProtologueVirtualPath = ProtologueVirtualPath;
                    this.SpeciesAuthority = SpeciesAuthority;
                    this.Note = Note;
                }
            }

            // Save changes using AJAX
            $('#saveChanges').click(function() {

                var table = getDomElement("#table_taxonomy_species");

                if (table) {
                    const tableBody = document.querySelector('#table_taxonomy_species tbody');
                    const rows = tableBody.querySelectorAll('tr');

                    rows.forEach((row) => {
                        var id = $(row).find('input[name="ID"]').val();
                        var genusId = $(row).find('input[name="GenusID"]').val();
                        var genusName = $(row).find('input[name="GenusName"]').val();
                        var speciesName = $(row).find('input[name="SpeciesName"]').val();
                        var speciesAuthority = $(row).find('input[name="SpeciesAuthority"]').val();
                        var protologue = $(row).find('input[name="Protologue"]').val();
                        var protologueVirtualPath = $(row).find('input[name="ProtologueVirtualPath"]').val();
                        var note = $(row).find('input[name="Note"]').val();

                        var species = new SpeciesDTO(id, genusId, genusName, speciesName, speciesAuthority, protologue, protologueVirtualPath, note);
                        SaveSpecies(species);
                    });
                }
            });

            function SaveSpecies(speciesDTO) {
                    console.log("DEBUG: SAVING " + speciesDTO.ID, speciesDTO.GenusID, speciesDTO.GenusName, speciesDTO.SpeciesName, speciesDTO.SpeciesAuthority, speciesDTO.Protologue, speciesDTO.ProtologueVirtualPath, speciesDTO.Note);
                    $.ajax({
                        url: '@Url.Action("Save","Species")',
                        type: 'POST',
                        contentType: "application/json; charset=utf-8",

                        data: JSON.stringify( { speciesDTO: speciesDTO }),
                        success: function (response) {
                            if (response.success) {
                                // Handle success
                                alert("Success: " + response.message);
                            } else {
                                // Handle the list of error messages
                                var errorList = response.messages;
                                var errorMessage = "The following errors occurred:\n";
                                for (var i = 0; i < errorList.length; i++) {
                                    errorMessage += "- " + errorList[i] + "\n";
                                }
                                alert(errorMessage);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert("An error occurred: " + error);
                        }
                    });
                }

            function getDomElement(selector) {
                try {
                    const element = document.querySelector(selector);

                    if (!element) {
                        throw new Error(`Element with selector "${selector}" not found.`);
                    }

                    return element; // Return the DOM element reference if it exists
                } catch (error) {
                    console.error(error.message);
                    return null; // Return null if there's an error
                }
            }
        });
    </script>*@
