@model USDA.ARS.GRIN.GGTools.Taxonomy.ViewModelLayer.GenusViewModel
@{
    ViewBag.Title = Model.PageTitle;
    Layout = "~/Views/Shared/_LayoutAdminLTE3.cshtml";
}
@Html.Partial("~/Views/Shared/_RevisionHistory.cshtml")
@using (Html.BeginForm("Edit", "Genus", FormMethod.Post, new { id = "frmEdit" }))
{
    @Html.HiddenFor(x => x.PageTitle)
    @Html.HiddenFor(x => x.EventAction)
    @Html.HiddenFor(x => x.EventValue)
    @Html.HiddenFor(x => x.TableName)
    @Html.HiddenFor(x => x.TableCode)
    @Html.HiddenFor(x => x.Entity.ID)
    @Html.HiddenFor(x => x.IsTypeGenus)
    @Html.HiddenFor(x => x.Entity.Rank)
    @Html.HiddenFor(x => x.Entity.IsAcceptedName)
    <input id="hfCurrentAction" type="hidden" />
    <input id="hfCurrentValue" type="hidden" />
    <div class="card card-default">
        <div class="card-header">
            <div class="btn-group">
                <a id="btnSetAcceptedOn" class="btn btn-default btn-sm" href="#" role="button"><i class="fas fa-thumbs-down"></i> Not Accepted</a>
                <a id="btnSetAcceptedOff" class="btn btn-default btn-sm" href="#" role="button"><i class="fas fa-thumbs-up"></i> Accepted</a>
            </div>
            @if (Model.Entity.ID > 0)
            {
                <div class="btn-group">
                    <a class="btn btn-default btn-sm" href="@Url.Action("Add", "Genus", new { @rank = "subgenus" })">Add Subgenus</a>
                    <button type="button" class="btn btn-default btn-sm dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu" role="menu" style="">
                        <a class="dropdown-item btn-sm" href="@Url.Action("Add", "Genus", new { @rank = "section" })">Section</a>
                        <a class="dropdown-item btn-sm" href="@Url.Action("Add", "Genus", new { @rank = "subsection" })">Subection</a>
                    </div>
                </div>
                <div class="btn-group">
                    <a class="btn btn-default btn-sm" href="@Url.Action("Add","Species", new { @genusId = Model.Entity.ID,  @rank = "species"  })">Add Species</a>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-default btn-sm" data-toggle="modal" data-target="#modal-citation-lookup">
                        <i class="fa fa-book"></i>
                    </button>
                </div>
                <div class="btn-group">
                    <a href="@Url.Action("Add","CommonName", new { genusId = Model.Entity.ID })" class="btn btn-default btn-sm">Add Common Name</a>
                </div>
            }
            <div class="btn-group">
                <button type="button" class="btn btn-default btn-sm pull-right" data-toggle="modal" data-target="#modal-note-lookup">
                    <i class="fa fa-search margin-r-5"></i>
                    Notes
                </button>
            </div>
            <a href="https://npgsdev.ars-grin.gov/gringlobal/taxon/taxonomygenus?id=@Model.Entity.ID" target="_blank" class="btn btn-info btn-sm float-right">
                <i class="fa fa-globe"></i>
                View Public Website
            </a>
        </div>
        <div class="card-body">
            @Html.Partial("~/Views/Shared/_ValidationMessages.cshtml")
            <div class="row accepted">
                <div id="section-accepted-name" class="col-md-3 accepted">
                    <div class="form-group">
                        <label>Accepted Name</label>
                        <div class="input-group">
                            @Html.TextBoxFor(x => x.Entity.AcceptedName, new { @class = "form-control" })
                            @Html.HiddenFor(x => x.Entity.AcceptedID)

                            @if (Model.Entity.ID > 0)
                            {
                                <span class="input-group-btn">
                                    <a href="@Url.Action("Edit", "Genus", new { @entityId = Model.Entity.AcceptedID })" class="btn btn-default btn-flat">
                                        <i class="fa fa-link"></i>
                                    </a>
                                </span>
                            }
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default btn-flat" data-toggle="modal" data-target="#modal-genus-lookup">
                                    <i class="fa fa-search"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Family</label>
                        <div class="input-group">
                            @Html.TextBoxFor(x => x.Entity.FamilyName, new { @class = "form-control", @readonly = "readonly", @style = "background-color:#ecf0f5;" })
                            @Html.HiddenFor(x => x.Entity.FamilyID)

                            @if (Model.Entity.FamilyID > 0)
                            {
                                <span class="input-group-btn">
                                    <a href="@Url.Action("Edit", "FamilyMap", new { @entityId = Model.Entity.FamilyID })" class="btn btn-default btn-flat">
                                        <i class="fa fa-link"></i>
                                    </a>
                                </span>
                            }

                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default btn-flat" data-toggle="modal" data-target="#modal-family-lookup">
                                    <i class="fa fa-search"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Genus Name</label>
                        @Html.TextBoxFor(x => x.Entity.Name, new { @class = "form-control" })
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Qualifying Code</label>
                        @Html.DropDownListFor(x => x.Entity.QualifyingCode, Model.QualifyingCodes, "NULL", new { @class = "form-control" })
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Hybrid Code</label>
                        @Html.DropDownListFor(x => x.Entity.HybridCode, Model.HybridCodes, "NULL", new { @class = "form-control" })
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Authority</label>
                        <div class="input-group">
                            @Html.TextBoxFor(x => x.Entity.Authority, new { @class = "form-control" })
                            <span class="input-group-btn">
                                <button type="button" data-toggle="modal" data-target="#modal-author-lookup" class="btn btn-default btn-flat">
                                    <i class="fa fa-search"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label>Note</label>
                    @Html.TextAreaFor(x => x.Entity.Note, new { @id = "txtNote", @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a href="@Url.Action("Refresh")" class="btn btn-warning">Cancel</a>
            @if (Model.Entity.ID > 0)
            {
                <button id="btnDelete" type="button" class="btn btn-danger">
                    Delete
                </button>
            }
            <button type="submit" class="btn btn-primary float-right">Save</button>
        </div>
    </div>
}

@Html.Partial("~/Views/Taxonomy/Family/Modals/_Lookup.cshtml")

@if (Model.Entity.ID > 0)
{
    Html.RenderAction("_ListSynonyms", "Genus", new { @genusId = Model.Entity.ID });
    Html.RenderAction("_ListSubdivisions", "Genus", new { @genusName = Model.Entity.Name });
    //Html.RenderAction("_List", "Species", new { @genusId = Model.Entity.ID });
    { Html.RenderAction("_List", "CommonName", new { @genusId = Model.Entity.ID }); }
    //Html.RenderAction("_List", "Citation", new { @genusId = Model.Entity.ID });
    //{ Html.RenderAction("_ConspecificList", "Species", new { @eventValue = Model.EventValue, @entityId = Model.Entity.ID }); }
    //{ Html.RenderAction("_List", "CommonName", new { @eventValue = Model.EventValue, @entityId = Model.Entity.ID }); }
    //{ Html.RenderAction("_List", "EconomicUse", new { @entityId = Model.Entity.ID }); }
    //{ Html.RenderAction("_List", "GeographyMap", new { @entityId = Model.Entity.ID }); }
    //{ Html.RenderAction("_List", "RegulationMap", new { @speciesId = Model.Entity.ID }); }
    //{ Html.RenderAction("_List", "Citation", new { @speciesId = Model.Entity.ID }); }
}
@Html.Partial("~/Views/Taxonomy/Author/Modals/_Lookup.cshtml")
@Html.Partial("~/Views/Taxonomy/Family/Modals/_Lookup.cshtml")
@Html.Partial("~/Views/Shared/Modals/_NoteLookup2.cshtml")
@Html.Partial("~/Views/Taxonomy/Shared/Modals/_Delete.cshtml")
<script type="text/javascript">
    $(document).ready(function () {
        Init();
    //    InitializeCKEditor();
    });

    function Init() {
        SetControlVisibility();
    }

    /*
    * ===================================================================================================
    * GENUS LOOKUP MODAL
    * ===================================================================================================
    */
    $("#btnOpenGenusLookupModal").click(function () {
        $("#lblGenusLookupTitle").html("Type Genus Search");
        $('#hfCurrentAction').val($(this).data("ggtools-action"));
        $('#hfCurrentValue').val($(this).data("ggtools-value"));
        $('#modal-genus-lookup').modal('show');
    });

    $("#btnLookupGenus").click(function () {
        var genusName = $("#txtLookupGenusName").val();
        var isAcceptedName = "";

        if ($("#cbxLookupGenusAcceptedNames").prop("checked") == true) {
            isAcceptedName = "Y";
        }

        var actionUrl = '@Url.Action("Lookup","Genus")';
        SearchGenus(actionUrl, genusName, isAcceptedName, "Y");
    });

    function SearchGenus(actionUrl, genusName, isAcceptedName, isSingleSelect) {
        var formData = new FormData();
        formData.append("LookupGenusName", genusName);
        formData.append("IsAcceptedName", isAcceptedName);
        formData.append("IsSingleSelect", isSingleSelect);

        $.ajax({
            url: actionUrl,
            type: 'POST',
            cache: false,
            contentType: false,
            processData: false,
            data: formData,
            success: function (response) {
                $("#section-genus-lookup-search-results").html(response);
            }
        });
    }

    function SelectGenus(ID, genusText) {
        $('#modal-genus-lookup').modal('hide');
        $("#Entity_ParentName").val(genusText);
        $("#Entity_ParentID").val(ID);
    }

    /*
    * ===================================================================================================
    * CITATION MODAL
    * ===================================================================================================
    */
    $(document).on("click", "[id='btnLookupCitations']", function () {
        var link = '@Url.Action("Lookup","Citation")';
        var tableName = $("#TableName").val();
        var entityId = $("#Entity_ID").val();
        var abbreviatedLiteratureSource = $("#SearchEntity_Abbreviation").val();
        var citationTitle = $("#SearchEntity_CitationTitle").val();
        var editorAuthorName = $("#SearchEntity_EditorAuthorName").val();
        var citationYear = $("#SearchEntity_CitationYear").val();
        var note = $("#SearchEntity_Note").val();

        var formData = new FormData();
        formData.append("EntityID", entityId);
        formData.append("TableName", tableName);
        formData.append("AbbreviatedLiteratureSource", abbreviatedLiteratureSource);
        formData.append("CitationTitle", citationTitle);
        formData.append("EditorAuthorName", editorAuthorName);
        formData.append("CitationYear", citationYear);
        formData.append("Note", note);
        formData.append("IsMultiSelect", "Y");

        try {
            $.ajax({
                url: link,
                type: 'POST',
                cache: false,
                contentType: false,
                processData: false,
                data: formData,
                success: function (response) {
                    $("#section-citation-lookup-search-results").html(response);
                }
            });
        }
        catch (ex) {
            //ErrorHandler(ex);
        }
    });

    $(document).on("click", "[id='btnSaveCitations']", function () {
        SaveCitations();
    });

    $(document).on("click", "[id='btnAddCitation']", function () {
        AddCitation();
    });

    function AddCitation() {
        var link = '@Url.Action("Add","Citation")';
        var formData = new FormData();

        var tableName = $("#TableName").val();
        var entityId = $("#Entity_ID").val();
        var standardAbbreviation = $("#Entity_Abbreviation").val();
        var citationTitle = $("#Entity_CitationTitle").val();
        var editorAuthorName = $("#Entity_EditorAuthorName").val();
        var citationYear = $("#Entity_CitationYear").val();
        var doiReference = $("#Entity_DOIReference").val();
        var volumeOrPage = $("#Entity_VolumeOrPage").val();
        var note = $("#Entity_Note").val();

        formData.append("TableName", tableName);
        formData.append("GenusID", entityId);
        formData.append("StandardAbbreviation", standardAbbreviation);
        formData.append("CitationTitle", citationTitle);
        formData.append("EditorAuthorName", editorAuthorName);
        formData.append("CitationYear", citationYear);
        formData.append("DOIReference", doiReference);
        formData.append("VolumeOrPage", volumeOrPage);
        formData.append("Note", note);

        $.ajax({
            url: link,
            type: 'POST',
            cache: false,
            contentType: false,
            processData: false,
            data: formData,
            success: function (result) {

            },
            error: function () {

            }
        });

    }

    function SaveCitations() {
        var link = '@Url.Action("Add","Citation")';
        var tableName = $("#TableName").val();
        var entityId = $("#Entity_ID").val();
        var formData = new FormData();

        formData.append("TableName", tableName);
        formData.append("GenusID", entityId);

        var selectedItemIdList = GetSelectedEntityIDs("citation-lookup-data-table");
        formData.append("IDList", selectedItemIdList);

        $.ajax({
            url: link,
            type: 'POST',
            cache: false,
            contentType: false,
            processData: false,
            data: formData,
            success: function (result) {

            },
            error: function () {

            }
        });

    $("#modal-citation-search").modal("hide");
    $("#frmEdit").submit();
    }

    /*
    * ===================================================================================================
    * CKEDITOR
    * ===================================================================================================
    */
    function InitializeCKEditor() {
        const editor = CKEDITOR.replace('txtNote', {
            width: '100%',
            height: 100,
            enterMode: CKEDITOR.ENTER_BR
        }
        );

        editor.addCommand("searchNotes", {
            exec(edt) {
                OpenNoteLookupModal();
            }
        });

        editor.config.coreStyles_italic = { element: 'i', overrides: 'em' };

        editor.ui.addButton('SuperButton', {
            label: "Search taxon record notes.",
            command: 'searchNotes',
            toolbar: 'insert',
            height: 80,
            width: 100,
            icon: 'https://cdn-icons.flaticon.com/png/128/3031/premium/3031293.png?token=exp=1643047176~hmac=8e60d1aebf934f53fda6eb320d1ffedc'
        });
    }

    function GetSelectedEntityIDs(tableName) {
        var table = $('#' + tableName).DataTable();
        var ids = $.map(table.rows('.selected').data(), function (item) {
            return item[0]
        });
        console.log(ids)
        return ids;
    }
</script>
